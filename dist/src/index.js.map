{"version":3,"file":"index.js","sourceRoot":"/","sources":["src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Sentry from \"@sentry/node\";\nimport axios from \"axios\";\nimport Ably from \"ably\";\nimport { PrintService } from \"./printer\";\nimport { CacheCreator } from \"./cache\";\nimport { logger } from \"../libs/common/utils/logger\";\nimport { AppHandlePrinterJobOptions, AppServiceEvents, AppServiceOptions } from \"./types\";\nimport debug from \"debug\";\nconst autobind = require(\"class-autobind\").default;\nconst exitHook = require(\"async-exit-hook\");\n\nconst log = debug(\"PRINT-SERVICE\");\n\nSentry.init({\n  dsn: \"https://e4f36acab6234be194caa966e4b2c9c4@sentry.io/1302660\",\n  enabled: process.env.NODE_ENV === \"production\",\n});\n\nexport class AppService {\n\n  public os: \"windows\" | \"linux\";\n  public api: AppServiceOptions[\"api\"];\n  public copies: number;\n  public cache: ReturnType<typeof CacheCreator>;\n  public state: Ably.Types.ConnectionState;\n\n  public printers: string[];\n  public printer: PrintService;\n\n  public api_key?: string;\n  public id?: {\n    print_config: string;\n    restaurant: string;\n    api_key: string;\n  };\n\n  private job_number: number;\n  private ably?: Ably.Realtime;\n  private connected_once?: boolean;\n  private channels?: {\n    all_printers: Ably.Types.RealtimeChannel;\n    receive_jobs: Ably.Types.RealtimeChannel;\n    update_restaurant: Ably.Types.RealtimeChannel;\n    update_server: Ably.Types.RealtimeChannel;\n  };\n  private readonly callbacks: {[key: string]: (data: any) => void};\n\n  constructor(opts: AppServiceOptions) {\n    log(typeof autobind);\n    autobind(this);\n    this.os = opts.os;\n    this.api = opts.api;\n    this.copies = opts.copies || 1;\n    this.cache = CacheCreator(`${opts.paths.save}/temp-db.json`);\n    this.state = \"disconnected\";\n    this.callbacks = {};\n    this.job_number = 1;\n    this.printers = [];\n    this.printer = new PrintService({\n      cache: this.cache,\n      os: this.os,\n      save_folder: opts.paths.save,\n    });\n    exitHook(this.stop);\n    log(\"INITIALIZED\");\n  }\n\n  public start() {\n    log(\"SERVICE STARTED\");\n    const { api_key, api, id } = this;\n\n    if (!api_key || !id) {\n      logger.captureWarning(\"Missing api key and ID when starting\");\n      return;\n    }\n\n    if (this.ably) {\n      this.ably.close();\n      delete this.ably;\n    }\n\n    // CONNECT TO ABLY BY AUTHING TO SERVER\n    this.ably = new Ably.Realtime({\n      authCallback: (tokenParams, callback) => {\n        const opts = {\n          headers: {\n            Authorization: `Bearer ${api_key}`,\n          },\n        };\n        axios.get(api.ably_auth, opts)\n          .then(({data}) => callback(\"\", data))\n          .catch( (e) => {\n            if (e.response && e.response.data === \"token-error\") {\n              this.onCallback(\"updates\", \"token-error\");\n              this.stop();\n            }\n            else {\n              logger.captureException(e);\n              this.onCallback(\"updates\", \"auth-error\");\n            }\n            callback(e, \"\");\n          });\n      },\n      recover: (lastConnectionDetails, cb) => {\n        log(lastConnectionDetails);\n        cb(true);\n      },\n    });\n\n    // LISTEN TO CONNECTION STATE CHANGES\n    this.ably.connection.on((stateChange) => {\n      log(\"STATE CHANGE: \" + stateChange.current);\n      this.set_state(stateChange.current);\n    });\n    this.ably.connection.on(\"connected\", () => {\n      if (this.connected_once && this.channels) {\n        this.channels.all_printers.presence.enter();\n        this.channels.update_restaurant.presence.enter({ type: \"printer\" });\n        this.channels.receive_jobs.history(this.handle_print_job_history);\n      }\n      this.connected_once = true;\n    });\n\n    // GENERIC PRINTERS CHANNEL\n    this.channels = {\n      all_printers: this.ably.channels.get(`private:printing-clients`),\n      receive_jobs: this.ably.channels.get(`private:printing-client:${api_key}`),\n      update_server: this.ably.channels.get(`private:printing-clients:jobs`),\n      update_restaurant: this.ably.channels.get(`private:restaurant:${id.restaurant}`),\n    };\n\n    this.channels.all_printers.presence.enter();\n\n    // RECEIVE PRINT JOBS\n    this.channels.receive_jobs.subscribe(\"new-job\", this.handle_print_job);\n    this.channels.receive_jobs.history(this.handle_print_job_history);\n\n    // SEND UPDATES TO SERVER AND CLIENT\n    this.channels.update_restaurant.presence.enter({ type: \"printer\" });\n\n    this.job_number = 1;\n\n    this.onCallback(\"updates\", \"started\");\n  }\n  public stop() {\n    if (this.ably && this.ably.close) {\n      this.ably.close();\n      if (this.channels) {\n        this.channels.all_printers.presence.leave();\n        this.channels.update_restaurant.presence.leave();\n      }\n      setTimeout(() => {\n        delete this.ably;\n        this.onCallback(\"updates\", \"stopped\");\n      }, 200);\n    }\n    this.connected_once = false;\n  }\n  public set_config(opts: { printers?: string[]; api_key?: string; copies?: number }) {\n\n    if (opts.api_key) {\n      const api_key_parts = opts.api_key.split(\"|\");\n      this.api_key = opts.api_key;\n      this.id = {\n        restaurant: api_key_parts[0],\n        print_config: api_key_parts[1],\n        api_key: api_key_parts[2],\n      };\n      log(this.id);\n    }\n\n    if (opts.printers) {\n      this.printers = opts.printers.filter( (p) => !!p );\n    }\n\n    if (opts.copies) {\n      this.copies = opts.copies;\n    }\n\n    log(\"SET CONFIG SERVICE\");\n\n  }\n  public set_state(state: Ably.Types.ConnectionState) {\n    this.state = state;\n    this.onCallback(\"updates_status\", state);\n  }\n\n  // EVENTS\n  public on(event: AppServiceEvents, fn: (data: any) => void) {\n    this.callbacks[`event_callback_${event}`] = fn;\n  }\n  private onCallback(event: AppServiceEvents, data: any) {\n    const fn = this.callbacks[`event_callback_${event}`] || (() => {});\n    fn(data);\n  }\n\n  // HANDLERS\n  private async handle_print_job(message: AppHandlePrinterJobOptions, fromHistory?: boolean) {\n    // LOG\n    log(`${this.job_number} - PRINT JOB RECEIVED`, message.data);\n    this.onCallback(\"print_job\", { event: \"received\", data: message.data });\n\n    // INCREMENT JOB NUMBER\n    this.job_number++;\n\n    // PARSE DATA\n    const data = message.data || {};\n    const { job_id, query, notify_restaurant_dashboard } = data;\n\n    try {\n      // GET BASE64 PDF\n      if (this.os === \"windows\") {\n        const queryData = await this.api_get_job_image(query);\n        const { base64, width, height, deviceScaleFactor } = queryData;\n        log(\"BASE64 IMAGE FETCHED\", width, height);\n        await this.printer.print_windows({\n          job_id: job_id,\n          copies: this.copies,\n          printers: this.printers,\n          base64: base64,\n          width: width,\n          height: height,\n          deviceScaleFactor: deviceScaleFactor,\n        });\n      }\n      else {\n        const queryData = await this.api_get_job_pdf(query);\n        const { base64, width, height } = queryData;\n        log(\"BASE64 PDF FETCHED\", width, height);\n        await this.printer.print_linux({\n          copies: this.copies,\n          printers: this.printers,\n          base64: base64,\n          job_id: job_id,\n        });\n      }\n\n      log(\"PRINT JOB COMPLETE\");\n\n      // NOTIFY DASHBOARD IF REQUIRED\n      if (notify_restaurant_dashboard)\n        this.publish_restaurant_update(data);\n\n      // UPDATE SERVER OF JOB SUCCESS\n      this.publish_server_update(data);\n\n      // LOG\n      this.onCallback(\"print_job\", { event: \"success\", data: message.data });\n    }\n    catch (e) {\n      logger.error(\"PRINT ERROR\");\n      logger.captureException(e.response ? e.response : e);\n      data.error = true;\n\n      // NOTIFY DASHBOARD OF ERROR\n      if (notify_restaurant_dashboard)\n        this.publish_restaurant_update(data);\n\n      // NOTIFY SERVER\n      this.publish_server_update(data);\n\n      // LOG\n      this.onCallback(\"print_job\", { event: \"error\", data: e });\n      this.onCallback(\"error\", e);\n    }\n  }\n  private handle_print_job_history(e: any, resultPage: any) {\n    if (e) {\n      logger.captureException(e);\n    }\n    else {\n      resultPage.items.forEach((message: any) => {\n        this.handle_print_job(message, true);\n      });\n      if (resultPage.hasNext()) {\n        resultPage.next(this.handle_print_job_history);\n      }\n    }\n  }\n\n  // PUBLISHERS\n  private publish_restaurant_update(messageData: any) {\n    log(\"NOTIFY RESTAURANT\");\n    if (this.channels)\n      this.channels.update_restaurant.publish(\"printer:job-update\", messageData, this.handle_error);\n  }\n  private publish_server_update(messageData: any) {\n    log(\"NOTIFY SERVER\");\n    if (this.channels)\n      this.channels.update_server.publish(\"update\", messageData, this.handle_error);\n  }\n\n  private handle_error(err: any) {\n    if (err) {\n      logger.captureException(err);\n      this.onCallback(\"error\", err);\n    }\n  }\n\n  // API\n  private async api_get_job_pdf(query: any): Promise<APIPrintingClientOrderToPDFResponse> {\n    const { api_key, api } = this;\n    const options = {\n      headers: {\n        Authorization: `Bearer ${api_key}`,\n      },\n    };\n    const res = await axios.post(api.receipt_pdf, { query }, options);\n    return res.data;\n  }\n  private async api_get_job_image(query: any): Promise<APIPrintingClientOrderToImageResponse> {\n    const { api_key, api } = this;\n    const options = {\n      headers: {\n        Authorization: `Bearer ${api_key}`,\n      },\n    };\n    const res = await axios.post(api.receipt_image, { query }, options);\n    return res.data;\n  }\n\n}\n"]}