{"version":3,"file":"printer.js","sourceRoot":"/","sources":["src/printer.ts"],"names":[],"mappings":"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","sourcesContent":["import path from \"path\";\nimport fs from \"fs\";\nimport shell from \"shelljs\";\nimport shortid from \"shortid\";\nimport sharp from \"sharp\";\nimport debug from \"debug\";\nconst autobind = require(\"class-autobind\").default;\nimport { logger } from \"../libs/common/utils/logger\";\nimport {CacheCreator} from \"./cache\";\nimport {PrintServicePrintLinuxOpts, PrintServicePrintWindowsOpts, PrintServiceOptions} from \"./types\";\n\nconst log = debug(\"PRINTER\");\n\nexport class PrintService {\n\n  public print_cli: string;\n  public save_folder: string;\n  public cache: ReturnType<typeof CacheCreator>;\n\n  constructor(opts: PrintServiceOptions) {\n    autobind(this);\n    this.cache = opts.cache;\n    this.save_folder = opts.save_folder;\n    this.print_cli = path.resolve(__dirname, \"../resources/PrintCLI.exe\");\n  }\n\n  public async print_windows(data: PrintServicePrintWindowsOpts) {\n\n    if (!this.print_job_valid(data)) {\n      return;\n    }\n\n    const { printers, copies, width, height } = data;\n    const image_files = await this.image_split_n_save_sharp(data);\n\n    const scripts: string[] = [];\n\n    for (const printer of printers) {\n      for (let i = 0; i < copies; i++) {\n        let script = `\"${this.print_cli}\" ${width} ${height} \"0,0,0,0\" \"${printer}\"`;\n        for (const image of image_files) {\n          script += ` \"${image}\"`;\n          setTimeout(() => this.file_remove(image), 120000);\n        }\n        scripts.push(script);\n      }\n    }\n\n    await this.exec(scripts);\n\n    this.cache.set(data.job_id, { error: false });\n\n  }\n  public async print_linux(data: PrintServicePrintLinuxOpts) {\n\n    if (!this.print_job_valid(data)) {\n      return;\n    }\n\n    const { printers, copies, base64 } = data;\n    const { file_path } = await this.file_save(base64, \"pdf\");\n    setTimeout(() => this.file_remove(file_path), 90000);\n\n    const scripts: string[] = [];\n\n    for (const printer of printers) {\n      for (let i = 0; i < copies; i++) {\n        const script = `lp -d \"${printer}\" \"${file_path}\"`;\n        log(`PRINT SCRIPT: ${script}`);\n        scripts.push(script);\n      }\n    }\n\n    await this.exec(scripts);\n\n    this.cache.set(data.job_id, { error: false });\n\n  }\n  private print_job_valid(data: PrintServicePrintLinuxOpts | PrintServicePrintWindowsOpts) {\n    const { job_id } = data;\n    const jobExists = this.cache.get(job_id);\n    if (!jobExists) {\n      log(`PRINT JOB ${job_id}`);\n      return true;\n    }\n    logger.warn(`DUPLICATE JOB ID ${job_id}`);\n    return false;\n  }\n\n  /*\n  private async image_split_n_save_jimp(data: APIPrintingClientOrderToImageResponse) {\n    const { base64, width, height } = data; // deviceScaleFactor\n    const { file_path, doc_id } = await this.file_save(base64, \"png\");\n    setTimeout(() => this.file_remove(file_path), 120000);\n\n    const baseImage = await jimp.read(file_path);\n\n    baseImage.autocrop({\n      tolerance: 0,\n      cropOnlyFrames: false,\n      // cropSymmetric?: boolean;\n      // leaveBorder?: number;\n    });\n\n    const actualWidth = baseImage.bitmap.width; // the width of the image\n    const actualHeight = baseImage.bitmap.height; // the height of the image\n\n    const actualScaleFactor = actualWidth / width;\n\n    // const adjustedBaseWidth = width * actualScaleFactor;\n    const adjustedBaseHeight = height * actualScaleFactor;\n\n    console.log(`\n      BASE WIDTH: ${baseImageWidth}\n      BASE HEIGHT: ${baseImageHeight}\n      SCALE FACTOR: ${deviceScaleFactor}\n\n      ACTUAL WIDTH: ${actualWidth}\n      ACTUAL HEIGHT: ${actualHeight}\n      ACTUAL SCALE FACTOR: ${actualScaleFactor}\n\n      ADJUSTED WIDTH: ${adjustedBaseWidth}\n      ADJUSTED HEIGHT: ${adjustedBaseHeight}\n    `);\n\n    if (actualHeight > adjustedBaseHeight) {\n      // SPLIT IMAGES\n      const fileNames = [];\n\n      const cropX = 0;\n      const cropWidth = actualWidth;\n\n      let cropY = 0; // start crop\n      const cropHeight = adjustedBaseHeight; // end crop\n\n      let splitCount = 0;\n\n      let notDone = true;\n\n      while (notDone) {\n        const done = (cropY + cropHeight) >= actualHeight;\n        notDone = !done;\n\n        // console.log(`CROP Y: ${cropY} || CROP HEIGHT: ${cropHeight}`);\n\n        const img = baseImage.clone();\n\n        img.crop(cropX, cropY, cropWidth, cropHeight);\n\n        const file = `${this.save_folder}/${doc_id}-${splitCount}.png`;\n        fileNames.push(file);\n        await img.writeAsync(file);\n\n        cropY += adjustedBaseHeight;\n        splitCount++;\n      }\n\n      return fileNames;\n\n    }\n    else {\n      // RETURN SINGLE IMAGE AT FULL CORRECT LENGTH\n      const actualFullHeight = actualScaleFactor * height;\n      const img = baseImage.clone();\n      img.crop(0, 0, actualWidth, actualFullHeight);\n      const file = `${this.save_folder}/${doc_id}-0.png`;\n      await img.writeAsync(file);\n      return [ file ];\n    }\n\n  }\n  */\n  private async image_split_n_save_sharp(data: APIPrintingClientOrderToImageResponse) {\n    const { base64, width, height } = data; // deviceScaleFactor\n    const { file_path, doc_id } = await this.file_save(base64, \"png\");\n    setTimeout(() => this.file_remove(file_path), 120000);\n\n    const baseImageBuffer = await sharp(file_path).trim().toBuffer({ resolveWithObject: true });\n    const baseImage = sharp(baseImageBuffer.data);\n\n    // const metadata = await baseImage.metadata();\n    const actualWidth = baseImageBuffer.info.width; // metadata.width as number; // the width of the image\n    const actualHeight = baseImageBuffer.info.height; // metadata.height as number; // the height of the image\n\n    const actualScaleFactor = actualWidth / width;\n    // const adjustedBaseWidth = width * actualScaleFactor;\n    const expectedPageHeight = Math.round(height * actualScaleFactor); // the actual height required to be proportional to the width\n\n    if (actualHeight > expectedPageHeight) {\n      log(\"IMAGE: SPLIT MULTI PAGE\");\n      // SPLIT IMAGES\n      const fileNames = [];\n\n      const cropX = 0;\n      const cropWidth = actualWidth;\n\n      let cropY = 0; // start crop\n      const cropHeight = expectedPageHeight; // end crop\n\n      let splitCount = 0;\n\n      let notDone = true;\n\n      while (notDone) {\n        const done = (cropY + cropHeight) >= actualHeight;\n        notDone = !done;\n\n        const img = baseImage.clone();\n\n        if (done) {\n          // CROP THE SMALL REMAINING BIT AND EXTEND IT OUT TO FULL SIZE\n          const lastCropHeight = actualHeight - cropY;\n          img.extract({\n            left: cropX,\n            width: cropWidth,\n            top: cropY,\n            height: lastCropHeight,\n          }).extend({\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: expectedPageHeight - lastCropHeight,\n            background: { r: 255, b: 255, g: 255, alpha: 1 },\n          });\n        }\n        else {\n          img.extract({\n            left: cropX,\n            width: cropWidth,\n            top: cropY,\n            height: cropHeight,\n          });\n        }\n\n        const file = `${this.save_folder}/${doc_id}-${splitCount}.png`;\n        fileNames.push(file);\n        await img.png().toFile(file);\n\n        cropY += expectedPageHeight;\n        splitCount++;\n      }\n\n      return fileNames;\n\n    }\n    else if (actualHeight === expectedPageHeight) {\n      log(\"IMAGE: CORRECT HEIGHT\");\n      const img = baseImage.clone();\n      const file = `${this.save_folder}/${doc_id}-0.png`;\n      await img.png().toFile(file);\n      return [ file ];\n    }\n    else {\n      // RETURN SINGLE IMAGE AT FULL CORRECT LENGTH\n      const img = baseImage.clone();\n      log(\"IMAGE: EXTEND PAGE BY %s %s\", actualHeight, expectedPageHeight - actualHeight);\n      // img.resize(actualWidth, expectedPageHeight);\n      img.extend({\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: expectedPageHeight - actualHeight,\n        background: { r: 255, b: 255, g: 255, alpha: 1 },\n      });\n      const file = `${this.save_folder}/${doc_id}-0.png`;\n      await img.png().toFile(file);\n      return [ file ];\n    }\n\n  }\n\n  private file_save(base64: string, extension: \"pdf\" | \"png\"): Promise<{ file_path: string; doc_id: string; }> {\n    return new Promise((resolve, reject) => {\n      const doc_id = shortid.generate();\n      const file_path = `${this.save_folder}/${doc_id}.${extension}`;\n      console.log(\"SAVE FILE\", this.save_folder);\n      fs.writeFile(file_path, base64, \"base64\", (err) => {\n        if (err)\n          reject(err);\n        else\n          resolve({ file_path, doc_id });\n      });\n    });\n  }\n  private file_remove(path: string) {\n    fs.unlink(path, (err) => {\n      if (err)\n        logger.captureException(err, \"ERROR DELETING FILE\");\n    });\n  }\n\n  private _exec(script: string) {\n    return new Promise((resolve, reject) => {\n      shell.exec(script, (code, stdout, stderr) => {\n        if (code === 0) {\n          resolve({data: stdout, exitCode: code });\n        }\n        else {\n          reject({error: stderr, exitCode: code });\n        }\n      });\n    });\n  }\n  private async exec(script: string | string[]) {\n    if (typeof script === \"string\") {\n      return await this._exec(script);\n    }\n    let error;\n    // EXECUTE THE ARRAY OF SCRIPTS\n    for (const s of script) {\n      try {\n        await this._exec(s);\n      }\n      catch (err) {\n        // CATCH ANY ERRORS MANUALLY TO PREVENT INTERRUPTING PRINTING\n        error = err;\n      }\n    }\n    // THROW THE ERROR AFTER ATTEMPTING TO PRINT TO ALL PRINTERS\n    if (error)\n      throw error;\n    return true;\n  }\n}\n"]}